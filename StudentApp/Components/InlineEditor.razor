<style>
    .editor{
        display: flex;
        align-items: center;
    }
    
    .button{
        height: 1rem;
        width: 1rem;
        border: none;
        background: white;
        margin-right: .4rem;
    }
    
    .button:hover{
        cursor: pointer;
    }
    
    .label, .value, .input{
        display: flex;
        align-items: center;
        font-size: 1rem;
        margin: 0;
        width: fit-content;
        box-sizing: border-box;
    }
    
    .label{
        margin-right: .2rem;
    }
    
    input{
        border: none;
        outline: none;
        text-decoration: underline;
        color: #f25a5a;
    }
</style>

@if (IsEditing)
{
    <div class="editor" style="box-sizing: border-box">
        <button style="padding: 0; margin: 0" class="button" @onclick="SaveChanges"><i class="fa-solid fa-floppy-disk"></i></button>
        <h6 class="label">@Label:</h6>
        <input class="input" style="width: @Width; padding: 0" type="text" value="@FieldValue" @oninput="UpdateFieldValue"/>
    </div>
}
else
{
    <div class="editor" style="box-sizing: border-box">
        <button style="padding: 0; margin: 0" class="button" @onclick="StartEditing"><i class="fa-solid fa-pencil"></i></button>
        <h6 class="label">@Label:</h6>
        <p class="value" style="width: @Width">@FieldValue</p>
    </div>
}





@code {


    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? FieldValue { get; set; }

    [Parameter]
    public EventCallback<string> OnFieldValueSaved { get; set; }

    private bool IsEditing { get; set; }

    private void StartEditing()
    {
        IsEditing = true;
    }

    private void UpdateFieldValue(ChangeEventArgs e)
    {
        FieldValue = e.Value.ToString();
    }

    private async Task SaveChanges()
    {
        IsEditing = false;

        await OnFieldValueSaved.InvokeAsync(FieldValue);
    }
}